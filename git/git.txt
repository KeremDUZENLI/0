########## GIT CONFIGURATION ##########
--- Global Configuration ---
git config --global user.name "UserNAME"
git config --global user.email "...@gmail.com"

--- Local Configuration ---
git config --local user.name "UserNAME"
git config --local user.email "...@gmail.com"

--- View Configuration ---
git config --global --list
git config --local --list

--- Create Personal Token on GITLAB ---
Command Plate > GitLab: Add Account to VS Code





########## SSH KEY MANAGEMENT ##########
--- Creating an RSA Key for GitHub ---
ssh-keygen -t rsa -b 4096 -C "...@gmail.com"
cd ~/.ssh/
cat id_rsa.pub

--- Creating an ED25519 Key for GitLab ---
ssh-keygen -t ed25519 -C "...@gmail.com"
cd ~/.ssh/
cat id_ed25519.pub

--- Activate the SSH Key for GitLab ---
ssh -T git@gitlab.com





########## REPOSITORY OPERATIONS ##########
--- Initialize a new Git repository ---
git init test_project

--- Staging changes ---
git add .  |  git add -A

--- Commit the staged changes ---
git commit -m "adding hello.txt"  |  git commit --allow-empty-message -m $''  |  git commit --amend --no-edit

--- Adding a Remote ---
git remote add origin git@git...

--- Pushing Changes ---
git push origin branch_name  |  git push --force origin branch_name

--- Pulling Changes ---
git pull  |  git pull origin main

--- Git Ignore ---
git add .gitignore
git commit -m "Update .gitignore to ignore helpers/"
git rm -r --cached .
git add .
git commit -m "Apply .gitignore rules: untrack ignored files"





########## BRANCH OPERATIONS ##########
--- Set Main Branch ---
git config --global init.defaultBranch main
cd .../test_project
git branch -m main

--- Create a New Branch ---
git branch v1_branch

--- Create and Switch to a New Branch ---
git checkout -b v2_branch

--- Switch Branch ---
git checkout v1_branch

--- Merge Branch ---
git checkout main
git pull origin main
git merge v1_branch
git add .
git commit -m "Merge: v1_branch into main"
git push origin main

--- Delete Branch ---
- Delete Locally -
git branch -d v1_branch

--- Delete Remotely ---
git push origin --delete v1_branch
git pull --prune

--- Checking Branches ---
git status
git branch --all
git log --all --oneline





########## RESTORING CHANGES ##########
--- See a Reference of All Actions (for recovery) ---
git reflog

--- Restore to Commit ---
git checkout commit_hash

--- Restore All Files Before Commit ---
git restore .

--- Revert all changes in the working directory
git checkout .

--- Reset to a Previous Commit (merge state) ---
git reset --merge commit_hash

--- Forcing a Hard Reset ---
git checkout main
git reset --hard commit_hash
git push --force origin main

--- More Restoration Commands ---
git stash           # stash changes
git stash push	    # hide current changes
git stash apply	    # reapply the most recent stash 
git stash list      # view stashed entries
git stash pop       # reapply and remove the stash
git stash clear	    # clear all stashed entries